import { IncomingHttpHeaders } from 'http';
import { KubeConfig, CoreV1Api } from '@kubernetes/client-node';
import yaml from 'js-yaml';

export const getUserKubeConfig = () => {
  const kc = new KubeConfig();
  kc.loadFromCluster();
  const config = kc.exportConfig();
  return yaml.load(config);
};

export const getUserKubeConfigMock = () => {
  const temp = `apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2VENDQWRHZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQ0FYRFRJMU1ESXhNakEyTlRZME0xb1lEekl4TWpVd01URTVNRFkxTmpReldqQVZNUk13RVFZRApWUVFERXdwcmRXSmxjbTVsZEdWek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCjVDTWwyWExDYkZ2NGk0QkdXZDFnczVkdHlkeXNVOEhIeGUzNzh2RlJSbW1rWm9zekJodWJHN2xvczJ4ZVdqcVoKemExNVZzLzFaSkN2UWl4VXQ3UDQ1YkRRZU1mSjhILy9xTDRrRHl5amZ3ZFd4KzhmRXpSeEJqeDBsUWNtTUFBZQpEUWtrVzIyQmIyMUlGWDUyMzRZQlU3SVJkNDl1QmM2QUh4d1NxY2Q5TTNrT0xBdEY4TkhJR2VTQTZHZzBoSXlPCndxcDV6MTNLdzllVWRkQVEzREs0eUtHVG5BZ3BHUUJXN3ZQM3hjdUlKSlEvTWFTN1pORjRYNVhnbXdCWXlEWEoKVEVHZW94U2Vobm1RQkxIRStNcC9JRGZ6dkk2REwybmxsRWN6SGZneERHWU45UGFnYlFydUxORWl5SzloMGR4awpVNm1xRy85a3Z5Vkx2QnVQVGphMkN3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQXFRd0R3WURWUjBUCkFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVsZXBiYUY0a0NtNWdIMFU0eDZhMFZHMXJNRTB3RFFZSktvWkkKaHZjTkFRRUxCUUFEZ2dFQkFIREVYYVRnT2lxcW81c3ZFdlRZdmQwMzhMVHk5Z1ROdTRCd2lWOXFwN2lvRDM2awpnUzd5ZFF2dEptRGV4MmpLNTRJVTFLd29vWGtQTjJrTUlISVl2N1kra1BOMWk0TzluU2gydy9qTGdWVURYbEtICmtYSDhxUGpNV2taK1BrbU10SnlyRVZNUlZNYzJVVm5pY04yL2EwWlQvZ3dubDE4elNyR3ZkNm5uTzgzdlNIeEMKMzR2M2xocGRwajFBWElqeExSK0dqMEZURmhoREFpdXNjMExUT25SZHdCaStkZy84bit0ZkNUMVppZnlaSXpIdApuNHlzSGxCdURVbURLSllDNmRHVUFNaTh1b1BQYmdTd0QvZnJ3N3R6eXJNeWR6RGVwMzZsd29haEZScTdjMDNGCnEvWncwYnd6MFBvNUlLN1EwdDhMNmVaRnVDMHZxNWZPNlBtdjhnUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    server: https://172.20.22.234:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lJUmlUUXBFb3ZUSmN3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWdGdzB5TlRBeU1USXdOalUyTkROYUdBOHlNVEkxTURFeE9UQTJOVFkwT0ZvdwpOREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhHVEFYQmdOVkJBTVRFR3QxWW1WeWJtVjBaWE10CllXUnRhVzR3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRHd0V1g0bHh2Nld4NUQKM2p6Q2NVTjMxeW95T0tGN1lGSnBkM2JuSlpBQml3dXFyajNrdmtCcTM2SjFiUnEydkpQdjg3NGhVNkd0U1ZxMgpaYVQ1VkdOZDVOQTVSM3VDK3Z1cHRIZkZZNUZKK0s1d0tGWGliU1J3V25pa1RyaEJ0YS90SlVQMzhOSU1qaXRsCkxMWnRLWkpqMXFqRU8renFnUlNIOUpCOHBiRHRRdklDV2VPZE1YYThIT1hLbEVadWN0dmo3QUJvZmZObkJGR0IKQ29yRmw1NFpRUkdlUlYyYUZ3OWhVU0V5eXJGTmhXUzZRWnFKTkdRTTdXZkdwNWZRcmFJTFR6a1paTENFN0laeQpEQ3QzcktSdDk3OU9hTkVoNm8yZTFVWHJnelMycG1JK3dKMzhpWm8vT0VSR2xhTCt1cEtrd3lyaURJWE5rU1dECnFzSXo3QjBsQWdNQkFBR2pTREJHTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQWZCZ05WSFNNRUdEQVdnQlNWNmx0b1hpUUtibUFmUlRqSHByUlViV3N3VFRBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFvQWl0amR5UHlqQ3JBSTV3V2dTVlJZWGNWVTVkczY4VTFQemQzekZqY2hMNjBoNWdHRkhKCmNtV0FRcThOQ3FlY0xZT0dYV2pZTTZOQTZ1YUVhUzlWMXNvaEtGcGlxNzhIdkx1WGRuK2h4SFNHbjVUWW5aMnIKTXBVNk1ZbWQ0M2dGeGtwWmdiSU5kemZ6NGFha1c0c2QwUVVXS1haYnBsK1dzLzFadGhCS0RqdXAwNUpQUU03RwpCSEpZOGE0eU5VUEhqaTNoeVdBTUY4bHUrVHZRdkZoYThmSEtJU0hid2RDcE95cjg5TXlaSmJMVkVUVkt6bFE3Cm5QR0FBd3F3VlZoczJudVR1SnExVXdFejFURVZLclBXblpXNVpRL0RiZWpjVDRnUjR2aXhVR09vQWxJeU5FdEoKTWtYUzgyb094djhYcFNTRGszc1FaUlZjMnFzVnl1WFViQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBOExWbCtKY2IrbHNlUTk0OHduRkRkOWNxTWppaGUyQlNhWGQyNXlXUUFZc0xxcTQ5CjVMNUFhdCtpZFcwYXRyeVQ3L08rSVZPaHJVbGF0bVdrK1ZSalhlVFFPVWQ3Z3ZyN3FiUjN4V09SU2ZpdWNDaFYKNG0wa2NGcDRwRTY0UWJXdjdTVkQ5L0RTREk0clpTeTJiU21TWTlhb3hEdnM2b0VVaC9TUWZLV3c3VUx5QWxuagpuVEYydkJ6bHlwUkdibkxiNCt3QWFIM3pad1JSZ1FxS3haZWVHVUVSbmtWZG1oY1BZVkVoTXNxeFRZVmt1a0dhCmlUUmtETzFueHFlWDBLMmlDMDg1R1dTd2hPeUdjZ3dyZDZ5a2JmZS9UbWpSSWVxTm50VkY2NE0wdHFaaVBzQ2QKL0ltYVB6aEVScFdpL3JxU3BNTXE0Z3lGelpFbGc2ckNNK3dkSlFJREFRQUJBb0lCQUhITTBSRGVJQlFVMEJJMgpGM08yS0xlWHVoTlVRc1FabmR6TzVpQVIyaXRnbVh0d05VTFh6NHkzZmc4V0xmTUc1TW9rNmxiSE8wQzUxWEUyClRQQ3p2T2EvTHRKbHdUY0RnY2VSMHE0M2pKRDBTVVF0VGExbS9EdENDcGRqd0NrUXhNUFJRbmtPR2NCbDFvNVcKdlVpT3h1NzhwWDFnOTNsRzNYWUpZZVlNVDhGYlltRUNvbXVqamcwTG90bnROYXc5dkpmODZPRVR1Q3NTVkNVRgplSFRDakxValY4THBFTUw2eGF3anhnNStDL1Uvd0FjeHZKL3gvTU1yMjNPdFJKTWEwZEovR0ZQcFU5T1V2eWI1ClRLTm8waDVLSlpLanhtRDBxVEl3cUVRQUxHM2VKWGhYVFZLSm5VZVhGbVlTRk10U000d2Z0eG9UMkJtYVFGNTcKWi9oRHNnRUNnWUVBKzU4K1pML01JVTY4dGEyZDM3T29VckNhcTg5SlVWUU1XR01tSHpYSk5abkU3REFXSUNhUQowUHFvWGpxU1dZdHZjMWM2cjNiNmpxeFg2eCtIcVREZkFPSmlyZ1ZDcFp2aHpucSt3Z21lTXYwSGdyOEprOTI4ClNlSjlIZUNYTGU2M2ViakdXdml4Q1BwUEVRQnpUMTBoeGVDWU14S054ZlRkZGpia213b2w3cFVDZ1lFQTlPV0wKY0RTSDByN0xtVnkvUjBFMUpXa0xJR1d0UUxpR2JCRlI5Mmh6NkRQLytQWGcwUlVLVGEzRTk3S1ZsblZoY3phWQpHdnFTOWkrSW0rdmNnbXJ1NlRyRFZ5cVh4RFhYLzVZUlRGK3EvRENGNndWWTBjQTVCVmtkY01kZGxKUW9IMFA0CndzUzdCZHR5a2VKMEVTaFFibVFxYVo0WVdEbVZRMXJTWk41MUlGRUNnWUFMMUVPeHB0YW81ak8yOHMrT09icjcKRURSbFNWeHdCMXlCTjBBT2pZL0ZCbEtjcS9JT1Z1SE9BVXF6QzF2Zis4OGtoQUJOU1hHa0RYUWdxSjNQRlc0VwpjNDRpRWpzODMrUXd1ZEtIK3IzR05lRUpnNE9td1BEZUpGaXZjK1NIazBacTRZWHB0dkZUczdqTjJ0Q1E5WmJsCjM1WW9LSUlqd1V3OEIzNmR6MDlUTlFLQmdIU1JpclRISEZ1eEc4S05Sak1KazkyUnlZMExPTk9Vd2M5UTB6NDcKeHVnaFVGZFYya1JMaXBMOUFzT1FpdW1LUisrS2JnNXhkV0Nmc1p2ZVFpRUYrMkNpNnZaanZNZlZoVklRUVgyawpFQVJvcUdYOUxwRHd1WE9WUHBFL0pJa2ptSkdCVGppUFlpSmdtWUZkVkRnU2cyNTRXVVBheitXMnl4aTdjMmcyCkIzUnhBb0dCQU5LNHJFZzN5YlB6aVFPMllwRUNGYWFvUDdlanFXTVlQc29DTXJiZm1SNFlobkxXUGJlZi92cmsKN3d6bVdpYTFzWTZnNjVlVHQzbGpqZzlYRHc0a0x6Q1J5QjczVktzS0hCelVBdDZwTWJXeVhoVjBmV0FvN0JyWgpER0kyQUNWaVNCQzZCOVE1cXVQektTaHFRdFpKK1BTbXgzKzhKSU1iS2c5STBMYUxIS1N4Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==`;
  return yaml.load(temp);
};

export const authSession = async (header: IncomingHttpHeaders) => {
  if (!header) return Promise.reject('unAuthorization');
  // console.log('header:', header);
  let {authorization} = header;
  if (!authorization) return Promise.reject('unAuthorization');

  try {
    const kubeConfig = decodeURIComponent(authorization);
    return Promise.resolve(kubeConfig);
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};

export const getAdminAuthorization = async (header: IncomingHttpHeaders) => {
  const kubeConfig =
    process.env.NODE_ENV === 'development' ? getUserKubeConfigMock() : getUserKubeConfig();
  try {
    return Promise.resolve(JSON.stringify(kubeConfig));
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
}
