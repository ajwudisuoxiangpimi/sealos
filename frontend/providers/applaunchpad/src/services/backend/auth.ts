import { IncomingHttpHeaders } from 'http';
import { KubeConfig, CoreV1Api } from '@kubernetes/client-node';
import yaml from 'js-yaml';

export const getUserKubeConfig = () => {
  const kc = new KubeConfig();
  kc.loadFromCluster();
  const config = kc.exportConfig();
  return yaml.load(config);
};

export const getUserKubeConfigMock = () => {
  const temp = `apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2VENDQWRHZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQ0FYRFRJME1EZ3lOekF5TXpJME1sb1lEekl4TWpRd09EQXpNREl6TWpReVdqQVZNUk13RVFZRApWUVFERXdwcmRXSmxjbTVsZEdWek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCjBpajA1MWgyVzgyQ3RiMUgwNGlPUXBHUTVobnZOa2NFMEN5b2dWTm9RTmFmamduSm1ja0ZCRG4zdTVoUG1lVGsKVkgrWWNUK2xHTEdwNWwyTjdLVEhEUDBzZWxXUFFUUGJMMHZpWUFEMGVQMUlkODEwek9US2JOMlRnYUxYQ0dtRgpvWU9pcTRpdjNmOVlYRnYvOXhCVXVpZ3dpelNWOG5YWkJDVUQ3Q2NsajllUFZpRW0yb25zeTZadnRGZkpZMzg4ClNYREMwdzMwSmZaNW9IMlJUQU83ajc3L2p6WXRTZURlTnBSMnI1cXc0cGVyZTQrWEIzQXRmdzNkVzNpU2tzcjUKcVVFRGNpazVrZVZCQVhrcW9qMFJ1RXIxTmhacXZSb2hDSWZrRjdWSUt4bVVEVWJlalRQQkl1S1hyRldGWWxPZApvbU4yejIxNngrN09ISTNvZDlmSTl3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQXFRd0R3WURWUjBUCkFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUrdGpxcGVKRzh4S3NHNlVHcXpIekZBT2w4VGt3RFFZSktvWkkKaHZjTkFRRUxCUUFEZ2dFQkFCbXVRQ2ozcUZNeGQybTZVb3VLbXF3b2NWSHBqK1hEaUNMOVN4WFN0bmZXcjNVYgpRNHFTMndYam1NbmFkc0hoYmJGRHFDWVhHaURBT3grcTdocEhTZzI1bWtQLzZ1Z0pHbTMvSWRrS1dPK3V1a2hSCit3czdGaFJLeW55VUVtV2NNNC93cEFoTEY4WGNnSksrNzNIa2IxbWVWTitEdEhMZ1cyQmZMZGlTVytUZUU5eTMKbUVCT3diZGVEZFRmOU1Gb2xhYUZ0ekJsYTBFV1QvVzl5YmlKRzE2aDJoOWpHS2tZRlVGWVNRWWtRclBBMHQySQptcFhlcWl0aG5hU3JTOVdtTXY4S0o1bGZzcDhTU0dVRDg1T0kwYTUwaFc0SElpREdDY21INFNjeWEvNTBkNnpMCnd6NlAvV1lHNFc4bWRmSmFBbmM3TUdJR0w3NmlFeGQ2OFZGd0Zxaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    server: https://192.168.0.134:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lJY204NERzVWQ3SkV3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWdGdzB5TkRBNE1qY3dNak15TkRKYUdBOHlNVEkwTURnd016QXlNekkwTkZvdwpOREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhHVEFYQmdOVkJBTVRFR3QxWW1WeWJtVjBaWE10CllXUnRhVzR3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREs3YitTK2FyV2V0emUKRm44VTBrdTZFV3hheXBlMlkzN0k1YW84ak5WTWlrTHlIY1RLVmVwMEpXcmhFYVpPN1kyNGdqVTNhbUdpZE9pYQpYaXQvaythaFFpUlJpQmJmNW1mVmg1M2tQeGVqTlpRZzRGbS9uakJXZmNJMFVtVGwwdUQwTG9tenRzejd2eVlxCi96Lzl1RVNqaDR4WTdWdGlCNWJKUzg1d1R1MHRqajFkclc3N3BCemxweFVaNDFVSDdjTkJkR1JsNUdRWFA5TFMKRG91amIzZkw0R2dmSHZoZG5laWdoTlBxZ2tpaEx3Y3Y2S3dhWFFlb2k2TDZtMStCNFJsQ2JwZHhnK3B3dHpjQgo5TVZXKzI4TUlvRzVqd1Q4K2JtR3orY1FUWlIvenI1ZmNQZVRnZU5GOVpPL2lrTGhvMm4vSG5PUkFTeXlaanVaCitXOGpXTTNWQWdNQkFBR2pTREJHTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQWZCZ05WSFNNRUdEQVdnQlQ2Mk9xbDRrYnpFcXdicFFhck1mTVVBNlh4T1RBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUF4Y282UWFoWHJiSFdxQkJBWEJyQmZtUWxHQzBqOVcxRS85eG1nRkdMSDh5QU5ISTJ3Z2ZpCmxLcWJvUXNKK0JJS1d4c2tUY3lpaEI5OC9KbGp4bEQ0bjNrWVNCQW1UOUFlb3pVQnRVRThDbVFjTGJKTmdDNkkKb1QrQnpOSmEwNUM5ZExybVAwbDk3VHRPUUtwT2M0YloyYWR0RWcvdUhwOEFZZEhITlpFYUxWeTVCL0hpd0lVego3RXFGRGNta0pNa2tidHpHeWhrWG02N292NzBCeWFPb3VoOFVOM1pOdWYzL2I0SUdzd1NxTUdZOERMVitqc1JkClkwZHM3cC84QkRieWhBNklrL2c5eEc5M01EQUE3MUh1dWY5K0hMaEs3dG9IaVdFd0JyU1JWNGx6U3haaFFpYU4KckpNeGk4OUNxRVF5eWVGa3QxRDRyTm9BNVcwNHlaWTNadz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeXUyL2t2bXExbnJjM2haL0ZOSkx1aEZzV3NxWHRtTit5T1dxUEl6VlRJcEM4aDNFCnlsWHFkQ1ZxNFJHbVR1Mk51SUkxTjJwaG9uVG9tbDRyZjVQbW9VSWtVWWdXMytabjFZZWQ1RDhYb3pXVUlPQloKdjU0d1ZuM0NORkprNWRMZzlDNkpzN2JNKzc4bUt2OC8vYmhFbzRlTVdPMWJZZ2VXeVV2T2NFN3RMWTQ5WGExdQorNlFjNWFjVkdlTlZCKzNEUVhSa1plUmtGei9TMGc2TG8yOTN5K0JvSHg3NFhaM29vSVRUNm9KSW9TOEhMK2lzCkdsMEhxSXVpK3B0ZmdlRVpRbTZYY1lQcWNMYzNBZlRGVnZ0dkRDS0J1WThFL1BtNWhzL25FRTJVZjg2K1gzRDMKazRIalJmV1R2NHBDNGFOcC94NXprUUVzc21ZN21mbHZJMWpOMVFJREFRQUJBb0lCQUhWT25La2M5TG9KeWpZRQpNVEJiSlBXSjd1WkpLUXlCVmFCU3kyYzNUbkp4bHFPWnU5SHZlcG5ycTI0eUlyNkxxcHBYZ3VYbTlFdlNZMGdoCldlbmxHTFJ0cE1zUTdaQS9CQlUyMFhwSlVxUEJiRURaRUdpcHpHMmpReW0xMjZmVGtNRDNTaGorZWw2cE1DbzQKNWNnSXhuejE5WmJPbHo0Qy94S2NaTmtkZHhRV2x1dmkvRFdXZ3Z4WG5kUWN5TEx3b3JWNjRzWXpOa0NWWUdGNgpoZmRVNkI4R1VpRU82MWJRbDMxL2dwcHMwN3ZsekxwZ3Q0YU03T09qWThDazNXVEZWTDN2dXF1RzBWYzNsU1hqCmZyRjNhd0NrUlJWVlRBQTRFeDYxM1piQUdXK3pJZWF5YWZKdDdKeXhlNGFjUmgxQ3FZN3F0Wms3YVhCNUNjbkQKUUc2SHF0MENnWUVBMlpqZUNSRTNFM0NzQVQ5dHR2SmNCZmt6ZDdOUStabkNrRGNPQmZHV2ZvT0gvOXQ0VTZGVApYQkorWjRXM2xMRzdGVWVkdFlBMWd4cmVZVnNPRXF4cyszb2kxQVV3U0xta2VBMFQ4VUZOdHhmd1gxNFE1QjFvCjlyelpUQTZmK0c4WGNxNlVDbERnNlN1bERZOGZRcmxKa21keW94MElwRVh4Y00vbVVVenQ1V2NDZ1lFQTdyNG4KcEJRMVNSQjMvNXFFanlWUHdBTHJkcUl5UGpsOGhoeWUvY0pldDhBM2VsdVVCSWtTUjIxVlU5ODNydk5KbGdWQwpJZFZoQlBWYjJUNCtKdGNMSEg4b21lQ3A1eWNmaHp1VkNwOS80eS9Ib0t5VDN3R3BpWitwcWpvQWxvRmlHL09tClltUm96YVl1M3hMc2Vwd1NNaUVuT0IzMUNxYWxrL205aHdKdzBXTUNnWUI3ZlNiZFRIak9QbzVQTXZrSDcybE0KTm8zLzY3TVR4REJIK2dhcVZ0M0t0TWpVNm0vU1BtYjVoTUZaN09ndnFlSDdoS1k3SUNTK1g5dytzaGM5Zjc5bAp4SDNKaDV4TVdaYStUdVczY0JFenpKRXMva3hsdVU4ZFlEV04xV3J4NmRJTDBvblBoUER2UTBhcmVFTU1jZTBQCitrZHp6SUZnQVJXeHFUc1RmcTR3RndLQmdRQ1VKQlpBNy9Fb2h6bU90M2l0d2o4OExCT2pwMzE1c3Y0YjBjS3UKUDErNnNXRTdZWHYxWElDbEphaWV4Skd1MDNQRHpUdDk5d09lcWdqMlFuTWFjckdJV3piOFZMWFlveVFqSzh1TgpyZThUTCtDMVNLRHc3ZjBmVXAxYTdXYlQvVEM5bTNDUStURTIrbmwzSGl6eTM4bENwZVBLSkh5YXdWRlpBc3loCjY5ZkpkUUtCZ0hMU29kS0laTjYxa1BERWo5MzROWG5ZVUZxa3JQYmIvQUVLdVNDdWE5U1FlQlBoZm9Hd1Vjbm4KcGR6WUdkNTRNTjFqdDg0ZGtpL1NYaFg5QnRuR1VZTVJPVVNzREJWZ0FCU2NqTk41NlNoOCtCaHA3andPaWd3bQpIYnlLNCt6RzNyRFlmRFU5YzJWalhUT0lTU2tQUW5nY0YxdzNtMVdVUksvQVNwdWM5NUZQCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==`;
  return yaml.load(temp);
};

export const authSession = async (header: IncomingHttpHeaders) => {
  if (!header) return Promise.reject('unAuthorization');
  console.log('header:', header);
  let {authorization} = header;
  if (!authorization) return Promise.reject('unAuthorization');

  try {
    const kubeConfig = decodeURIComponent(authorization);
    return Promise.resolve(kubeConfig);
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};

export const getAdminAuthorization = async (header: IncomingHttpHeaders) => {
  const kubeConfig =
    process.env.NODE_ENV === 'development' ? getUserKubeConfigMock() : getUserKubeConfig();
  try {
    return Promise.resolve(JSON.stringify(kubeConfig));
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
}
